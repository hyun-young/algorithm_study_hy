# dfs: 깊이 우선 탐색(스택이용)
# 인접 행렬: 2차원 배열로 그래프의 연결관계를 표현하는 방식
# 인접 리스트: 리스트로 그래프의 연결 관계를 표현하는 방식
# 5-6 인접행렬 방식 예제
inf = 1e9
# 2차원 리스트를 이용 인접행렬 표현
# 모든 관계를 저장하므로 노드가 증가할 수록 메모리 낭비 심해짐
graph = [
    [0,5,8],
    [5,0,inf],
    [8,inf,0]
]

print(graph)

# 2차원 리스트를 인접 리스트로 표현
# (메모리는 효율적이나 연결 데이터 일일이 다 확인해야되므로 속도 저하)
graph2 = [[] for _ in range(3)]

# 노드 0과 연결된 노드 정보 저장(노드, 거리)
graph2[0].append((1, 5))
graph2[0].append((2, 8))

# (노드, 거리)
graph2[1].append((0, 5))
graph2[2].append((0, 8))

print(graph2)

# dfs
# 1. 탐색 시작 노드를 스택에 삽입하고 방문 처리한다.
# 2. 스택 최상단 노드에 방문하지 않은 인접 노드가 있다면 그 인접 노드를 스택에 넣고 방문처리
# (방문하지 않은 인접노드가 없다면 스택에서 최상단 노드를 꺼낸다.)
# 3. 2번과정을 더이상 수행 못할 때 까지 반복
# ※ 방문처리는 스택에 한 번 삽입되어 처리된 노드가 다시 삽입되지 않게 체크하는 것
# 방문처리를 진행하면 각 노드를 한번씩만 처리할 수 있음

# dfs는 순서와 상관없지만, 코테에선 낮은 순번부터 처리하는 것을 요구할 수도 있어서
# 관행적으로 번호가 낮은 순서부터 처리하도록 구현한다.

# 노드의 탐색 순서는 낮은 순번대로 진행해서 스택에 들어간 순서로 확인할 수 있다.
# 재귀함수이용하면 매우 간결하게 구현 가능!

# 그래프(9*9)의 각 노드(0번빈노드 + (1-8)8개)의 방문여부 체크
visited = [False] * 9 # 1차원 리스트


def dfs(graph, v, visited):
    # 현재 노드 방문 처리
    visited[v] = True
    print(v, end=' ')
    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)

# 연결된 노드를 입력
graph = [
    [], # 빈리스트
    [2,3,8],
    [1,7],
    [1,4,5],
    [3,5],
    [3,4],
    [7],
    [2,6,8],
    [1,7]
    ]

dfs(graph, 1, visited) # 1-8 노드