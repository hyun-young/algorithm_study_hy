# 둘다 기본적으로 오름차순이 default
# list.sort() : 리스트형의 메소드, 리스트의 원본 값을 수정(inplace=True 느낌)
# sorted(list) : 내장함수, 원본 값은 그대로이고 정렬 값을 return
# ※ list.sort()는 return 값이 None이고, 원본 데이터만 수정하는 역할이다.
# ※ 미세한 차이지만 원본 값을 바꾸기 위한 목적의 정렬이면 sort가 더 빠름
a = sorted(a) ; a.sort()
# sorted()는 a를 또 할당해야하기 때문으로 판단됨

# 그러나 다른 정렬에 비해 모든 원소를 돌기 때문에 시간초과 가능성이 높음!
# ※ 힙, 버블, 선택 정렬 등 다른 정렬 방법도 익혀 두어야 함

# 람다: 익명함수를 지칭하는 용어
# 바로 정의하여 사용할 수 있는 함수
# 호출 시 그대로 객체가 반환

list_ex = [('aa', 3), ('bb', 19), ('cc', 5)]
list_ex.sort(key = lambda x: x[1])

# key는 적용되는 함수를 입력받으면, 그 기준으로 정렬된다는 의미
# key에 lambda x:x[1] 을 넣으면 index 1 기준으로 정렬하겠다는 의미이다.
# 주로 여러 개의 요소를 가진 경우(원소 형태가 튜플)에 사용한다.
# 문자형과 숫자값을 동시에 받을 때 주로 사용된다.


# key에 적용하는 람다 예시

lambda x: -x[1] # 1번 인덱스를 내림차순으로 정렬
# 1번 인덱스 오름차순 후 동일한 값은 0번 인덱스를 내림차순하라!
lambda x : (x[1], -x[0])
